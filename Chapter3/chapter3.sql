use role accountadmin;
grant usage on  warehouse COMPUTE_WH to role sysadmin;

USE ROLE SYSADMIN;
USE WAREHOUSE COMPUTE_WH;
CREATE OR REPLACE TRANSIENT DATABASE DEMO3B_DB
COMMENT = 'Transient Database for Chapter 3 Exercises';


USE ROLE ACCOUNTADMIN;
SHOW DATABASES;

--CHNAGE DATA RETENTION PERIOD
USE ROLE SYSADMIN;
ALTER DATABASE DEMO3A_DB
SET DATA_RETENTION_TIME_IN_DAYS = 10;

--TRANSIENT DATABASE, CAN'T SET DATA RETENTION PERIOD MORE THAN 1 DAY
USE ROLE SYSADMIN;
ALTER DATABASE DEMO3B_DB
SET DATA_RETENTION_TIME_IN_DAYS = 10;

--TABLE IN TRANSIENT DATABASE
USE ROLE SYSADMIN;
CREATE OR REPLACE TRANSIENT TABLE DEMO3B_DB.PUBLIC.SUMMARY
(
    CASH_AMT number,
    RECEIVABLES_AMT number,
    CUSTOMER_AMT number
)

SHOW TABLES;

USE ROLE SYSADMIN;
USE DATABASE DEMO3B_DB;
CREATE OR REPLACE SCHEMA BANKING;

CREATE OR REPLACE SCHEMA DEMO3B_DB.BANKING;

SHOW SCHEMAS;

--CHNAGE DATA RENTENTION PERIOD
USE ROLE SYSADMIN;
ALTER SCHEMA DEMO3B_DB.BANKING
SET DATA_RETENTION_TIME_IN_DAYS = 1;

-- CHANGE THE SCEMA OF A TABLE BY RENAMING IT
USE ROLE SYSADMIN;
CREATE OR REPLACE SCHEMA DEMO3B_DB.BANKING;

ALTER TABLE DEMO3B_DB.PUBLIC.SUMMARY
RENAME TO DEMO3B_DB.BANKING.SUMMARY;

-- MANAGED ACCESS SCHEMA
USE ROLE SYSADMIN;
USE DATABASE DEMO3A_DB;

CREATE OR REPLACE SCHEMA MSCHEMA WITH MANAGED ACCESS;

-- INFORMATION SCHEMA - ACCOUNT LEVEL VIEWS
SELECT * FROM INFORMATION_SCHEMA.APPLICABLE_ROLES;
SELECT * FROM INFORMATION_SCHEMA.DATABASES;
SELECT * FROM INFORMATION_SCHEMA.ENABLED_ROLES;
SELECT * FROM INFORMATION_SCHEMA.INFORMATION_SCHAMA_CATALOG_NAME;

SELECT * FROM INFORMATION_SCHEMA.LOAD_HISTORY;

SELECT * FROM INFORMATION_SCHEMA.REPLICATION_DATABASES;

-- SAME INFO
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.INFORMATION_SCHEMA.APPLICABLE_ROLES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.APPLICABLE_ROLES;

SELECT * FROM SNOWFLAKE_SAMPLE_DATA.INFORMATION_SCHEMA.DATABASES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.DATABASES;


-- DATABASE VIEWS IN INFORMATION SCHEMA
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.COLUMNS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.EXTERNAL_TABLES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.FILE_FORMATS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.FUNCTIONS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.OBJECT_PRIVILEGES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.PIPES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.PROCEDURES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.REFERENTIAL_CONSTRAINTS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.SCHEMATA;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.SEQUENCES;

SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.STAGES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.TABLE_CONSTRAINTS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.TABLE_PRIVILEGES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.TABLE_STORAGE_METRICS;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.TABLES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.USAGE_PRIVILEGES;
SELECT * FROM DEMO3A_DB.INFORMATION_SCHEMA.VIEWS;

--- TWO WAYS
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.INFORMATION_SCHEMA.SCHEMATA;
SHOW SCHEMAS IN DATABASE SNOWFLAKE_SAMPLE_DATA;


USE ROLE ACCOUNTADMIN;
USE DATABASE SNOWFLAKE;

USE SCHEMA ACCOUNT_USAGE;

SELECT 
  START_TIME::DATE AS USAGE_DATE,
  WAREHOUSE_NAME,
  SUM(CREDITS_USED) AS TOTAL_CREDITS_CONSUMED
FROM WAREHOUSE_METERING_HISTORY
WHERE START_TIME >= DATE_TRUNC('MONTH', CURRENT_DATE)
GROUP BY 1,2
ORDER BY 2,1;

----------------------
USE ROLE SYSADMIN;
USE DATABASE DEMO3A_DB;

CREATE OR REPLACE SCHEMA BANKING;

CREATE OR REPLACE TABLE CUSTOMER_ACCT
(
    CUSTOMER_ACCOUNT INT,
    AMOUNT INT,
    TRANSACTION_TS TIMESTAMP);

CREATE OR REPLACE TABLE CASH
(
    CUSTOMER_ACCOUNT INT,
    AMOUNT INT,
    TRANSACTION_TS TIMESTAMP);

CREATE OR REPLACE TABLE RECEIVABLES
(
    CUSTOMER_ACCOUNT INT,
    AMOUNT INT,
    TRANSACTION_TS TIMESTAMP);

USE ROLE ACCOUNTADMIN;
GRANT  IMPORTED PRIVILEGES ON DATABASE SNOWFLAKE_SAMPLE_DATA TO ROLE SYSADMIN;

USE ROLE SYSADMIN;
CREATE OR REPLACE VIEW DEMO3A_DB.PUBLIC.NEWVIEW AS
SELECT CC_NAME 
FROM (SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CALL_CENTER);

USE ROLE SYSADMIN;
CREATE OR REPLACE MATERIALIZED VIEW DEMO3A_DB.PUBLIC.NEWVIEW_MVM AS
SELECT CC_NAME 
FROM (SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.CALL_CENTER);


SELECT * FROM DEMO3A_DB.PUBLIC.NEWVIEW_MVM;


USE ROLE SYSADMIN;
USE DATABASE DEMO3B_DB;

CREATE OR REPLACE FILE FORMAT FF_JSON TYPE = JSON;

USE ROLE SYSADMIN;
USE DATABASE DEMO3B_DB;
CREATE OR REPLACE TEMPORARY STAGE BANKING_STG FILE_FORMAT = FF_JSON;



USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO3C_DB;

CREATE OR REPLACE FUNCTION JS_PROPERTIES()
RETURNS STRING LANGUAGE JAVASCRIPT AS
$$ return Object.getOwnPropertyNames(this); $$; 


select JS_PROPERTIES();


USE ROLE SYSADMIN;
USE DATABASE DEMO3C_DB;
CREATE OR REPLACE FUNCTION FACTORIAL(N VARIANT)
RETURNS VARIANT LANGUAGE JAVASCRIPT AS
'   var f=n;
    for (i=n-1; i>0; i--) {
        f *= i;
    }
    return f;
'


USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO3D_DB;

CREATE OR REPLACE TABLE DEMO3D_DB.PUBLIC.SALES AS
(SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCDS_SF100TCL.WEB_SALES)
LIMIT 100000;


SELECT 
  1 AS INPUT_ITEM, 
  WS_WEB_SITE_SK AS BASKET_ITEM,
  COUNT(DISTINCT WS_ORDER_NUMBER) AS BASKETS
FROM DEMO3D_DB.PUBLIC.SALES
WHERE WS_ORDER_NUMBER IN (
    SELECT WS_ORDER_NUMBER 
    FROM DEMO3D_DB.PUBLIC.SALES
    WHERE WS_WEB_SITE_SK = 1
)
GROUP BY WS_WEB_SITE_SK
ORDER BY BASKET DESC, BASKET_ITEM;


USE ROLE SYSADMIN;

CREATE OR REPLACE SECURE FUNCTION DEMO3D_DB.PUBLIC.GET_MKTBASKET(INPUT_WEB_SITE_SK number(38))
RETURNS TABLE (
    INPUT_ITEM number(38,0), 
    BASKET_ITEM number(38,0), 
    BASKETS number(38,0)
)
AS
'SELECT 
    1 AS INPUT_ITEM, 
    WS_WEB_SITE_SK AS BASKET_ITEM,
    COUNT(DISTINCT WS_ORDER_NUMBER) AS BASKETS
 FROM DEMO3D_DB.PUBLIC.SALES
 WHERE WS_ORDER_NUMBER IN (
     SELECT WS_ORDER_NUMBER 
     FROM DEMO3D_DB.PUBLIC.SALES
     WHERE WS_WEB_SITE_SK = INPUT_WEB_SITE_SK
 )
 GROUP BY WS_WEB_SITE_SK
 ORDER BY BASKETS DESC, BASKET_ITEM';


 SELECT * FROM TABLE(DEMO3D_DB.PUBLIC.GET_MKTBASKET(1));


USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO3E_DB;
CREATE OR REPLACE PROCEDURE STOREDPROC1(ARGUMENT1 STRING)
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'storedproc1'
AS
$$
def storedproc1(session, ARGUMENT1):
    return ARGUMENT1
$$;


CALL STOREDPROC1('I really love Snowflake ❄');

select * from DEMO3E_DB.INFORMATION_SCHEMA.PROCEDURES;

USE ROLE SYSADMIN;
USE DATABASE DEMO3A_DB;
USE SCHEMA BANKING;

CREATE OR REPLACE PROCEDURE deposit(PARAM_ACCT float, PARAM_AMT float)
RETURNS STRING
language python
runtime_version = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'deposit'
as
$$
def deposit(session, PARAM_ACCT, PARAM_AMT):
    cmd_debit = f"INSERT INTO DEMO3A_DB.BANKING.CASH VALUES ({PARAM_ACCT}, {PARAM_AMT}, CURRENT_TIMESTAMP());"
    cmd_credit = f"INSERT INTO DEMO3A_DB.BANKING.CUSTOMER_ACCT VALUES ({PARAM_ACCT}, {PARAM_AMT}, CURRENT_TIMESTAMP());"

    session.sql(cmd_debit).collect()
    session.sql(cmd_credit).collect()

    return "Deposit transaction succeeded."
$$;


USE ROLE SYSADMIN;
USE DATABASE DEMO3A_DB;
USE SCHEMA BANKING;

CREATE OR REPLACE PROCEDURE withdrawal(PARAM_ACCT float, PARAM_AMT float)
RETURNS STRING
language python
runtime_version = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'withdrawal'
as
$$
def withdrawal(session, PARAM_ACCT, PARAM_AMT):
    cmd_debit = f"INSERT INTO DEMO3A_DB.BANKING.CUSTOMER_ACCT VALUES ({PARAM_ACCT}, (-{PARAM_AMT}), CURRENT_TIMESTAMP());"
    cmd_credit = f"INSERT INTO DEMO3A_DB.BANKING.CASH VALUES ({PARAM_ACCT}, (-{PARAM_AMT}), CURRENT_TIMESTAMP());"

    session.sql(cmd_debit).collect()
    session.sql(cmd_credit).collect()

    return "withdrawl transaction succeeded."
$$;


USE ROLE SYSADMIN;
USE DATABASE DEMO3A_DB;
USE SCHEMA BANKING;

CREATE OR REPLACE PROCEDURE loan_payment(PARAM_ACCT float, PARAM_AMT float)
RETURNS STRING
language python
runtime_version = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'loan_payment'
as
$$
def loan_payment(session, PARAM_ACCT, PARAM_AMT):
    cmd_debit = f"INSERT INTO DEMO3A_DB.BANKING.CASH VALUES ({PARAM_ACCT}, {PARAM_AMT}, CURRENT_TIMESTAMP());"
    cmd_credit = f"INSERT INTO DEMO3A_DB.BANKING.RECEIVABLES VALUES ({PARAM_ACCT}, (-{PARAM_AMT}), CURRENT_TIMESTAMP());"

    session.sql(cmd_debit).collect()
    session.sql(cmd_credit).collect()

    return "Loan Payment transaction succeeded."
$$;

call withdrawal(21, 100);
call loan_payment(21, 100);
call deposit(21, 100);


select * from DEMO3A_DB.BANKING.CASH;

USE ROLE SYSADMIN; USE DATABASE DEMO3A_DB; USE SCHEMA BANKING;
TRUNCATE TABLE DEMO3A_DB.BANKING.CUSTOMER_ACCT;
TRUNCATE TABLE DEMO3A_DB.BANKING.CASH;
TRUNCATE TABLE DEMO3A_DB.BANKING.RECEIVABLES;

// Page 92 - Confirm no data is in the tables, after being truncated
SELECT CUSTOMER_ACCOUNT, AMOUNT FROM DEMO3A_DB.BANKING.CASH;

// Page 92 - Call the stored procedures 
USE ROLE SYSADMIN;
CALL deposit(21, 10000);
CALL deposit(21, 400);
CALL loan_payment(14, 1000);
CALL withdrawal(21, 500);
CALL deposit(72, 4000);

CALL withdrawal(21, 250);

//transaction summary stored procedure
USE ROLE SYSADMIN;
use database DEMO3B_DB;
use schema BANKING;

CREATE OR REPLACE PROCEDURE TRANSACTION_SUMMARY()
RETURNS STRING
LANGUAGE PYTHON
RUNTIME_VERSION = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'transaction_summary'
AS
$$
def transaction_summary(session):
    # TRUNCATE TABLE DEMO3B_DB.BANKING.SUMMARY;
    session.sql("TRUNCATE TABLE DEMO3B_DB.BANKING.SUMMARY").collect()
    # SUMMARIZE CASH Amount
    cmd_cash = "INSERT INTO DEMO3B_DB.BANKING.SUMMARY (CASH_AMT) select sum(AMOUNT) FROM DEMO3A_DB.BANKING.CASH;"
    session.sql(cmd_cash).collect()
    # SUMMARIZE RECEIVABLES Amount
    cmd_receivables = "INSERT INTO DEMO3B_DB.BANKING.SUMMARY (RECEIVABLES_AMT) select sum(AMOUNT) FROM DEMO3A_DB.BANKING.RECEIVABLES;"
    session.sql(cmd_receivables).collect()
    # SUMMARIZE CUSTOMER Amount
    cmd_customer = "INSERT INTO DEMO3B_DB.BANKING.SUMMARY (CUSTOMER_AMT) select sum(AMOUNT) FROM DEMO3A_DB.BANKING.CUSTOMER_ACCT;"
    session.sql(cmd_customer).collect() 
    return "Transaction successfully summarized."
$$;

call TRANSACTION_SUMMARY();

select * from DEMO3B_DB.banking.summary;

use role sysadmin;
use database DEMO3B_DB;
use schema banking;

select * from demo3b_db.banking.summary_vw;

USE ROLE SYSADMIN;
USE DATABASE DEMO3E_DB;

CREATE OR REPLACE PROCEDURE DROP_DB()
RETURNS STRING NOT NULL
LANGUAGE PYTHON
RUNTIME_VERSION = '3.10'
PACKAGES = ('snowflake-snowpark-python')  -- ✅ Required for Snowflake module access
HANDLER = 'drop_db'
AS
$$
def drop_db(session):
    session.sql("DROP DATABASE IF EXISTS DEMO3E_DB").collect()
    return "Database DEMO3E_DB dropped successfully."
$$;

CALL DROP_DB();

USE ROLE SYSADMIN;
USE DATABASE DEMO3B_DB;
CREATE OR REPLACE TASK TSK_WAIT_15
WAREHOUSE = 'COMPUTE_WH' SCHEDULE = '15 MINUTE'
AS CALL DROP_DB();

USE ROLE ACCOUNTADMIN;
GRANT EXECUTE TASK ON ACCOUNT TO ROLE SYSADMIN;

USE ROLE SYSADMIN;
ALTER TASK IF EXISTS TSK_WAIT_15 RESUME;

SELECT * FROM TABLE(INFORMATION_SCHEMA.TASK_HISTORY(TASK_NAME => 'TSK_WAIT_15', SCHEDULED_TIME_RANGE_START => DATEADD('MINUTE', -30, CURRENT_TIMESTAMP())  ));


USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO3E_DB;

CREATE OR REPLACE SEQUENCE SEQ_01 START = 1 INCREMENT = 1;
CREATE OR REPLACE TABLE SEQUENCE_TEST (I INTEGER);

SELECT SEQ_01.NEXTVAL; 


USE ROLE SYSADMIN;
CREATE OR REPLACE DATABASE DEMO3F_DB;
CREATE OR REPLACE SCHEMA BANKING;
CREATE OR REPLACE TABLE BRANCH (ID varchar, City varchar, Amount number (20,2));
INSERT INTO BRANCH (ID, City, Amount)
values
 (12001, 'Abilene', 5387.97),
 (12002, 'Barstow', 34478.10),
 (12003, 'Cadbury', 8994.63);

// Page 97 - View the records in the table
SELECT * FROM BRANCH;

// Page 97 - Create two streams and use SHOW STREAMS to see details
CREATE OR REPLACE STREAM STREAM_A ON TABLE BRANCH;
CREATE OR REPLACE STREAM STREAM_B ON TABLE BRANCH;
SHOW STREAMS;

// Page 97 - Streams are empty; Result of statements will be "Query produced no results"
SELECT * FROM STREAM_A;

SELECT * FROM STREAM_B;

// Page 97 - Insert some records into the table
INSERT INTO BRANCH (ID, City, Amount)
values
 (12004, 'Denton', 41242.93),
 (12005, 'Everett', 6175.22),
 (12006, 'Fargo', 443689.75);
 
// Page 97 - See what is now in the table and each of the streams; run the statements one at a time
SELECT * FROM BRANCH;

SELECT * FROM STREAM_A;

SELECT * FROM STREAM_B;

create or replace stream STREAM_C ON TABLE BRANCH;

INSERT INTO BRANCH (ID, City, Amount)
values
 (12007, 'Galveston', 351247.79),
 (12008, 'Houston', 917011.27);

 create or replace stream STREAM_B ON TABLE BRANCH;

 // Page 98 Delete the first record from each of the previous inserts
DELETE FROM BRANCH WHERE ID = 12001;
DELETE FROM BRANCH WHERE ID = 12004;
DELETE FROM BRANCH WHERE ID = 12007;
 SELECT * FROM BRANCH;
 
 SELECT * FROM STREAM_A;
 
 SELECT * FROM STREAM_B;
 
 SELECT * FROM STREAM_C;
 
// Page 99 Update a record in the Branch table 
UPDATE BRANCH
SET City = 'Fayetteville' WHERE ID = 12006;
SELECT * FROM BRANCH; 

// Page 99 View the contents of the table and each stream; run one at a time
SELECT * FROM BRANCH;
 
SELECT * FROM STREAM_A;
 
SELECT * FROM STREAM_B;

SELECT * FROM STREAM_C;


// Page 105 - Create a new database and schema for use with demonstrating tasks
USE ROLE ACCOUNTADMIN;
USE WAREHOUSE COMPUTE_WH;
USE DATABASE DEMO3F_DB;
CREATE OR REPLACE SCHEMA TASKSDEMO;

// Page 105 - Create a new table for use in demonstrating tasks
CREATE OR REPLACE TABLE DEMO3F_DB.TASKSDEMO.PRODUCT
 (Prod_ID int,
 Prod_Desc varchar(),
 Category varchar(30),
 Segment varchar(20),
 Mfg_ID int,
 Mfg_Name varchar(50));
 
 // Page 105 - Insert some values in the table
 INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1201, 'Product 1201', 'Category 1201', 'Segment 1201', '1201', 'Mfg 1201');
INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1202, 'Product 1202', 'Category 1202', 'Segment 1202', '1202', 'Mfg 1202');
INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1203, 'Product 1203', 'Category 1203', 'Segment 1203', '1203', 'Mfg 1203');
INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1204, 'Product 1204', 'Category 1204', 'Segment 1204', '1204', 'Mfg 1204');
INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1205, 'Product 1205', 'Category 1205', 'Segment 1205', '1205', 'Mfg 1205');
INSERT INTO DEMO3F_DB.TASKSDEMO.PRODUCT values
(1206, 'Product 1206', 'Category 1206', 'Segment 1206', '1206', 'Mfg 1206');

// Page 105 - Create a new Sales table
CREATE OR REPLACE TABLE DEMO3F_DB.TASKSDEMO.SALES
 (Prod_ID int,
 Customer varchar(),
 Zip varchar(),
 Qty int,
 Revenue decimal(10,2));
 
// Page 106 - Create a new stream 
CREATE OR REPLACE STREAM DEMO3F_DB.TASKSDEMO.SALES_STREAM
ON TABLE DEMO3F_DB.TASKSDEMO.SALES
APPEND_ONLY = TRUE;

// Page 106 - Insert values into the table to test that the stream works as expected
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1201, 'Amy Johnson', 45466, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1201, 'Harold Robinson', 89701, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1203, 'Chad Norton', 33236, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1206, 'Horatio Simon', 75148, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1205, 'Misty Crawford', 10001, 45, 2345.67);


// Page 106 - Confirm that the values are included in the stream
SELECT * FROM DEMO3F_DB.TASKSDEMO.SALES_STREAM;

// Page 106 - Create a sales transaction table
CREATE OR REPLACE TABLE DEMO3F_DB.TASKSDEMO.SALES_TRANSACT
 (Prod_ID int,
 Prod_Desc varchar(),
 Category varchar(30),
 Segment varchar(20),
 Mfg_ID int,
 Mfg_Name varchar(50),
 Customer varchar(),
 Zip varchar(),
 Qty int,
 Revenue decimal (10, 2),
 TS timestamp);

// Page 106 - Manually enter some data
INSERT INTO
 DEMO3F_DB.TASKSDEMO.SALES_TRANSACT
 (Prod_ID,Prod_Desc,Category,Segment,Mfg_Id,
 Mfg_Name,Customer,Zip,Qty,Revenue,TS)
SELECT
 s.Prod_ID,p.Prod_Desc,p.Category,p.Segment,p.Mfg_ID,
 p.Mfg_Name,s.Customer,s.Zip,s.Qty,s.Revenue,current_timestamp
FROM
 DEMO3F_DB.TASKSDEMO.SALES_STREAM s
 JOIN DEMO3F_DB.TASKSDEMO.PRODUCT p ON s.Prod_ID = p.Prod_ID;
 
 // Page 107 - Confirm that the records were inserted into the table
 SELECT * FROM DEMO3F_DB.TASKSDEMO.SALES_TRANSACT;

// Page 107 - Automate the task
CREATE OR REPLACE TASK DEMO3F_DB.TASKSDEMO.SALES_TASK
WAREHOUSE = compute_wh
SCHEDULE = '1 minute'
WHEN system$stream_has_data('DEMO3F_DB.TASKSDEMO.SALES_STREAM')
AS
INSERT INTO
 DEMO3F_DB.TASKSDEMO.SALES_TRANSACT
 (Prod_ID,Prod_Desc,Category,Segment,Mfg_Id,
 Mfg_Name,Customer,Zip,Qty,Revenue,TS)
SELECT
 s.Prod_ID,p.Prod_Desc,p.Category,p.Segment,p.Mfg_ID,
 p.Mfg_Name,s.Customer,s.Zip,s.Qty,s.Revenue,current_timestamp
FROM
 DEMO3F_DB.TASKSDEMO.SALES_STREAM s
 JOIN DEMO3F_DB.TASKSDEMO.PRODUCT p ON s.Prod_ID = p.Prod_ID;
ALTER TASK DEMO3F_DB.TASKSDEMO.SALES_TASK RESUME;

// Page 107 - Insert values into the sales table
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1201, 'Edward Jameson', 45466, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1201, 'Margaret Volt', 89701, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1203, 'Antoine Lancaster', 33236, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1204, 'Esther Baker', 75148, 45, 2345.67);
INSERT INTO DEMO3F_DB.TASKSDEMO.SALES VALUES
(1206, 'Quintin Anderson', 10001, 45, 2345.67);

// Page 108 - Confirm that the values were capted by the Sales stream
SELECT * FROM DEMO3F_DB.TASKSDEMO.SALES_STREAM;

// Wait for a minute

// Page 108 - Confirm that the task worked
SELECT * FROM DEMO3F_DB.TASKSDEMO.SALES_TRANSACT;

// Page 108 - Suspend the task
ALTER TASK DEMO3F_DB.TASKSDEMO.SALES_TASK SUSPEND;

// Page 108 - Code Cleanup
DROP DATABASE DEMO3C_DB; DROP DATABASE DEMO3D_DB;
DROP DATABASE DEMO3E_DB; DROP DATABASE DEMO3F_DB;
